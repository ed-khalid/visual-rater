interface Item {
id:String!
name:String!
score:Float
}

enum ItemType {
MUSIC
}

type UnratedAlbum implements Item {
    id: String!
    artistId:String!
    name: String!
    year: Int
    thumbnail: String
    songs:[Song!]!
    score:Float
    genres:Genres!
    artist:Artist!
}

type AlbumBrief {
    id:String!
    name: String!
    thumbnail: String!
    thumbnailDominantColors:[String!]
}
type ArtistBrief {
    id:String!
    name: String!
    thumbnail: String!
}

type Song implements Pageable {
    id:String!
    album: AlbumBrief!
    artist:ArtistBrief!
    score:Float
    name: String!
    number:Int!
    genres:Genres!
    shortname: String
}

type Genre {
    id:Int!
    name:String!
}

type Genres {
    primary:Genre!
    secondary:[Genre!]!
}

type Album {
    id: String!
    artistId:String!
    name: String!
    year: Int
    thumbnail: String
    thumbnailDominantColors:[String!]
    songs:[Song!]!
    score:Float
    genres:Genres
}

interface Page {
    totalPages: Int!
    pageNumber: Int!
    content:[Pageable!]!
}

interface Pageable {
    id:String!
}

type ArtistPage implements Page {
    totalPages:Int!
    pageNumber:Int!
    content:[Artist!]!
}
type SongPage implements Page {
    totalPages:Int!
    pageNumber:Int!
    content:[Song!]!
}

type ComparisonSong {
    id:String!
    songName:String!
    songScore:Float!
    albumName:String!
    albumDominantColor:String!
    artistName:String!
    thumbnail:String
}

type Artist implements Pageable {
    id: String!
    name:String!
    thumbnail: String
    thumbnailDominantColors:[String!]
    albums:[Album!]!
    score: Float!
    metadata:ArtistMetadata!
    genres:Genres
}

type ArtistSongMetadata {
    classic:Int!
    great:Int!
    verygood:Int!
    good:Int!
    pleasant:Int!
    decent:Int!
    interesting:Int!
    ok:Int!
    meh:Int!
    average:Int!
    boring:Int!
    poor:Int!
    bad:Int!
    offensive:Int!
}

type ArtistMetadata {
    id:String!
    songs:ArtistSongMetadata!
    totalSongs:Int!
    totalAlbums:Int!
}
